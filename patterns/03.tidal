

do
  let g x = (const $ s "~") $ x
  let switchPat = (fast "{1 2 3 2 3 4}%2" $ "{ 0 0 0 0 0}%2")
  d1
    $ mask switchPat
    $ someCyclesBy 0 (iter 8)
    $ (1 ~>)
    $ sometimesBy 0 (slow 2)
    $ (1 ~>)
    $ stack [
      every 8 (linger "3s")
        $ while "{[1 0 0]/3 0 0 0 0}%16" (off (0.0625/2*3) id )
        $ mask "[1 1 1 1 0 0 0     ]/2" 
        $ midichan (fmap([2,3,127]!!) $ markovPat 16 0 [[0.1, 0.8, 0.1], [0.1, 0.1, 0.8], [0.8, 0.1, 0.8]]) 
        # s "rytm" # amp 1 # note "c3"
      , iter 16 $ (0.5 ~>) $ every 2 g $ midichan 1 # note "c3" # amp 1 # s "rytm"
      , slow 8 $ midichan 0 # note (scale "minor" "{0 -1 1 -2 2 -3 3}%16") # amp 1 # s "harmor3" # legato (range 0.5 1 $ (3 ~>) $ rand)
      , sometimesBy 0.5 (slow 2) $ fast 16 $ s "rytm" # midichan 8 # note "c3" # amp 1
      , fast "{3 6 4 3 5}%3" $ ccn 39 # ccv (range 0 127 $ (8 ~>) $ rand) # s "rytm" # midichan 3
    ] # cps (100/120/2)
  d2
    $ mask (inv switchPat)
    $ stack [
      every 8 (linger "3s")
        $ while "{[1 0 0]/3 0 0 0 0}%16" (off (0.0625/2*3) id )
        $ mask "[1 1 1 1 0 0 0 0]/2" 
        $ midichan (fmap([6,7,127]!!) $ markovPat 16 0 [[0.1, 0.8, 0.1], [0.1, 0.1, 0.8], [0.8, 0.1, 0.8]]) 
        # s "rytm" # amp 1 # note "c3"
      , sometimesBy 0.5 (stutWith 5 "3s" (# amp 0.5)) 
        $ (0.5 ~>) $ every 2 g $ midichan 5 # note "c3" # amp 1 # s "rytm"
      , slow 8 $ midichan 0 # note (scale "minor" "{0 -1 1 -2 2 -3 3}%16") # amp 1 # s "harmor3" # legato (range 0.5 1 $ (3 ~>) $ rand)
      , g $ sometimesBy 0.333 (slow 2) $ fast 16 $ s "rytm" # midichan 9 # note "c3" # amp 1
    ] # cps (100/120/2)

    hush


    d1 $ fast 16 $ s "rytm" # midichan 8 # note "c3" # amp 1