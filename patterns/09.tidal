hush

do
  let g x = const (s "~") $ x
  let maskpatorig = "[1 1 0 1 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 0]/2"
  let maskpat = "[1 1 0 1 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]/2"
  let markovmatrix = [
          [0, 0, 0.1, 0.1], 
          [0, 0, 0.1, 0.1], 
          [0.1, 0.2, 2, 1],
          [0.1, 0.2, 2, 0.7]
        ]
  d1
    $ (11100 ~>)
    $ someCyclesBy (segment 10 $ range 0 0.8 $ slow 13.333 $ perlin) (iter 10)
    $ (1 ~>)
    $ sometimesBy 0.2 (|+ note "-10")
    $ (1 ~>)
    $ sometimesBy (range 0 0.5 $ slow 11.111 $ perlin) (slow 2)
    $ (1 ~>)
    $ degradeBy (segment 20 $ range 0 0.1 $ slow 18.1891 $ perlin)
    $ (1 ~>)
    $ stack [
      mask maskpat
        $ midichan (fmap([0,1,2,3]!!) $ markovPat 20 0 markovmatrix) # s "rytm" # amp 1 # note "c3"
      , mask maskpat
        $ amp (fmap([0.1,0.1,1,0.1]!!) $ markovPat 20 0 markovmatrix) 
          # s "harmor" # note "c5" # midichan 7
      , off (0.1 * 3) (# midichan 10) $ (0.6 ~>) $ midichan "[5]" # note "c3" # amp 1 # s "rytm"
      , (0.25 <~) $ slow 4 $ midichan 6 # note "c3" # amp 1 # s "rytm"
      , sometimesBy 0.25 (plyWith "<2 4 3 5>" (|* amp 0.5)) 
        $ (5 ~>) $ mask "[1 1 1 1 0]/4" $ fast 5 $ midichan 8 
          # note "c3" # amp (range 0.5 1 $ (44 ~>) $ rand) # s "rytm"
    ] # cps (120/120/2)
  d4 
    $ (11 ~>)
    $ slow (segment 2 $ range 1 4 $ (2389 <~) $ slow 14 $ perlin) 
      $ s "rytm" # ccn 92 # ccv (choose [0,1,2]) # midichan 12
  d2 $ whenmod 60 30 g $ slow 11 $ s "rytm" # midichan 4 # note "c3" # amp 1


d1 $ fast 0.5 $ midichan 0 # note "c3" # amp 1 # s "rytm"


-- hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi


    hush






let markovmatrix = [
        [0, 0, 0.1, 0.1], 
        [0, 0, 0.1, 0.1], 
        [0.1, 0.2, 2, 1],
        [0.1, 0.2, 2, 0.7]
      ]